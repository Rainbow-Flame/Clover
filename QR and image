# переходм в каталог /home/clover/catkin_ws/src/clover/clover/launch/main_camera.launch и в самом конце после node вставляем 
# <node pkg="topic_tools" name="cam_throttle" type="throttle" args="messages main_camera/image_raw 5.0 main_camera/image_raw_throttled"/>

# переходим в каталог /home/clover/catkin_ws/src/clover/clover/launch/aruco.launch и в 37 строчке, где "map" меняем значение на 
# <param name="map" value="/home/clover/catkin_ws/src/clover/aruco_pose/map/cmit.txt"/>

# аргумент aruco в файле ~/catkin_ws/src/clover/clover/launch/clover.launch должен быть в значении true
# Для включения распознавания карт маркеров аргументы aruco_map и aruco_detect в файле
# ~/catkin_ws/src/clover/clover/launch/aruco.launch должны быть в значении true

import math
import cv2
import rospy
from pyzbar import pyzbar
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from clover import srv
from std_srvs.srv import Trigger

bridge = CvBridge()

rospy.init_node('barcode_test')


get_telemetry = rospy.ServiceProxy('get_telemetry', srv.GetTelemetry)
navigate = rospy.ServiceProxy('navigate', srv.Navigate)
navigate_global = rospy.ServiceProxy('navigate_global', srv.NavigateGlobal)
set_position = rospy.ServiceProxy('set_position', srv.SetPosition)
set_velocity = rospy.ServiceProxy('set_velocity', srv.SetVelocity)
set_attitude = rospy.ServiceProxy('set_attitude', srv.SetAttitude)
set_rates = rospy.ServiceProxy('set_rates', srv.SetRates)
land = rospy.ServiceProxy('land', Trigger)

qr = ''
color = 'undefined'
def image_callback(data):
    global qr, color
    cv_image = bridge.imgmsg_to_cv2(data, 'bgr8') # OpenCv image

    img_hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)[119:120, 159:160]

    red_low1 = (0, 50, 50)
    red_high1 = (15, 255, 255)

    red_low2 = (165, 50, 50)
    red_high2 = (180, 255, 255)

    yellow_low = (16, 50, 50)
    yellow_high = (45, 255, 255)

    red_thresh1 = cv2.inRange(img_hsv, red_low1, red_high1)
    red_thresh2 = cv2.inRange(img_hsv, red_low2, red_high2)
    red_thresh = cv2.bitwise_or(red_thresh1, red_thresh2)
    yellow_thresh = cv2.inRange(img_hsv, yellow_low, yellow_high)

    if red_thresh[0][0] == 255:
        color = 'red'
    elif yellow_thresh[0][0] == 255:
        color = 'yellow'
    else:
        color = 'undefined'

    barcodes = pyzbar.decode(cv_image)
    for barcode in barcodes:
        qr = barcode.data.decode("utf-8")
        print("QR = ", qr)
        # b_type = barcode.type
        # (x, y, w, h) = barcode.rect
        # xc = x + w/2
        # yc = y + h/2
        # print("Found {} with data {} with center {} at x={}, y={}".format(b_type, qr_code, xc, yc))
        
def navigate_wait(x=0, y=0, z=1, yaw=0, speed=1, frame_id='aruco_map', auto_arm=False, tolerance=0.2):
    navigate(x=x, y=y, z=z, yaw=yaw, speed=speed, frame_id=frame_id, auto_arm=auto_arm)

    while not rospy.is_shutdown():
        telem = get_telemetry(frame_id='navigate_target')
        if math.sqrt(telem.x ** 2 + telem.y ** 2 + telem.z ** 2) < tolerance:
            break
        rospy.sleep(0.2)

image_sub = rospy.Subscriber("main_camera/image_raw_throttled", Image, image_callback, queue_size=1)
# Если у вас включен throttle кадров, то пишем вместо image_raw - image_raw_throttled

navigate_wait(frame_id="body", auto_arm=True)
navigate_wait(1,0,1)
navigate_wait(1,0,0.8)

while not rospy.is_shutdown() and qr == '':
    rospy.sleep(0.2)

qr2 = qr.split()

final_color = qr2[0]
path = qr2[1:]
print('---------------', path)
landing_point = [0,0]

for i in range(0, len(path), 2):
    navigate_wait(float(path[i]), float(path[i+1]))
    rospy.sleep(2)
    print(color)
    if color[0] == final_color:
        landing_point = [float(path[i]), float(path[i+1])]

navigate_wait(*landing_point)
land()
